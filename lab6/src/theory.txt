TCP, сокращенно от Transmission Control Protocol – это стандарт, 
определяющий как устанавливать и поддерживать связь, через которую две 
программы могут обмениваться данными.
Задача TCP состоит в том, чтобы разбивать сообщения или файлы на более 
мелкие части (называемые пакетами данных), которые затем отправляются 
через Интернет. После, эти пакеты обрабатываются другим уровнем TCP, 
который собирает данные в полный файл.
TCP протокол также отвечает за проверку этого потока данных на наличие 
ошибок, для обеспечения доставки данных. Если ошибка будет обнаружена, 
TCP повторно передаст пакет(ы).
Работа TCP состоит из и трех этапов:
    Установка соединения
    Передача данных
    Завершение соединения
TCP/IP - это набор протоколов, который задает стандарты связи между 
компьютерами и содержит подробные соглашения о маршрутизации и межсетевом 
взаимодействии. TCP/IP обеспечивает связь подключенных к сети компьютеров, 
обычно называемых хостами. В TCP/IP предусмотрены команды и средства, 
которые позволяют выполнять следующие действия:
    Передавать файлы в другую систему
    Входить в удаленную систему
    Выполнять команды в удаленной системе
    Печатать файлы в удаленной системе
    Отправлять электронные сообщения удаленным пользователям
    Вести интерактивный диалог с удаленными пользователями
    Управлять сетью
UDP (User Datagram Protocol, Протокол дейтаграмм пользователя) 
предназначен для обмена дейтаграммами между процессами компьютеров, 
входящих в единую сеть с коммутацией пакетов. В качестве протокола нижнего 
уровня UDP-протокол использует IP.
TCP — это сложный, требующий больших затрат времени протокол, что 
объясняется его механизмом установления соединения, но он берет на себя 
заботу о гарантированной доставке пакетов, избавляя нас от необходимости 
включать эту функциональную возможность в прикладной протокол.
Протокол TCP имеет встроенную возможность надежной доставки. Если 
сообщение не отправлено корректно, мы получим сообщение об ошибке. 
Протокол TCP определен в RFC 793.
UDP — очень быстрый протокол, поскольку в нем определен самый минимальный 
механизм, необходимый для передачи данных. Сообщения поступают в любом 
порядке, и то, которое отправлено первым, может быть получено последним. 
Доставка сообщений UDP вовсе не гарантируется, сообщение может потеряться, 
и могут быть получены две копии одного и того же сообщения. Последний 
случай возникает, если для отправки сообщений в один адрес использовать 
два разных маршрута. UDP не требует открывать соединение, и данные могут 
быть отправлены сразу же, как только они подготовлены. UDP не отправляет 
подтверждающие сообщения, поэтому данные могут быть получены или потеряны. 
Если при использовании UDP требуется надежная передача данных, ее следует 
реализовать в протоколе более высокого уровня.



Сокеты (англ. socket — разъём) — название программного интерфейса для 
обеспечения обмена данными между процессами. Процессы при таком обмене могут 
исполняться как на одной ЭВМ, так и на различных ЭВМ, связанных между собой 
сетью. Сокет — абстрактный объект, представляющий конечную точку соединения.

Существует два типа сокетов — UNIX-сокеты (или сокеты домена UNIX — Unix 
domain sockets) и INET-сокеты (IP-сокеты, network sockets).
UNIX-сокеты являются частью механизма IPC и позволяют обмен данными в обоих 
направлениях между процессами, работающими на одной машине.
INET-сокеты в свою очередь представляют собой механизм, позволяющий выполнять
коммуникацию между процессами по сети.
Грубо говоря — если UNIX-сокет использует файл в файловой системе, то 
INET-сокет — требует присваивания сетевого адреса и порта.
Типы сокетов определяют особенности связи, доступные приложению. Процессы 
взаимодействуют только через сокеты одного и того же типа. Основные типы 
сокетов:
Поточный
    - обеспечивает двухсторонний, последовательный, надежный, и 
недублированный поток данных без определенных границ. Тип сокета - 
SOCK_STREAM, в домене Интернета он использует протокол TCP. 
Датаграммный
    - поддерживает двухсторонний поток сообщений. Приложение, использующее 
такие сокеты, может получать сообщения в порядке, отличном от 
последовательности, в которой эти сообщения посылались. Тип сокета - 
SOCK_DGRAM, в домене Интернета он использует протокол UDP. 
Сокет
    последовательных пакетов - обеспечивает двухсторонний, 
последовательный, надежный обмен датаграммами фиксированной максимальной 
длины. Тип сокета - SOCK_SEQPACKET. Для этого типа сокета не существует 
специального протокола. 
Простой
    сокет - обеспечивает доступ к основным протоколам связи. 
    
    СЕРВЕР: Установка сокета socket() -> Присвоение имени bind() -> 
    -> Установка очереди запросов listen() -> Выбор соединения из очереди 
    accept() -> read() -> write()
    
    КЛИЕНТ: Установка сокета socket() -> Установка соединения connect() ->
    -> write() -> read()